function [] = SDFGui_Time(varargin)
% Script to compute the time response of a general single degree-of-freedom system.
% It allows multiple plots.
%
%**********************************************************************
% Author: Milton Dias Junior
% Date:	31-Aug-01
% Structures and Machines Vibrations Lab
% Department of Mechanical Design
% Faculty of Mechanical Engineering
% State University of Campinas
% São Paulo - Brazil
% milton@fem.unicamp.br
%*********************************************************************
%
set(0,'Units','normalized');
screenrect = get(0,'screensize');
screenwidth = screenrect(3);
screenheigth = screenrect(4);
fig.width   = .6;
fig.heigth  = .8;
fig.left    = (screenwidth-fig.width)/2;
fig.bottom  = (screenheigth-fig.heigth)/2;
FIGPOSIT    = [fig.left fig.bottom fig.width fig.heigth];
% [SnapData,IconCMap] = imread('snapshot.icon','bmp');
[SnapData] = SnapshotCData;
Data.FigPosit = FIGPOSIT;

Data.COrder = [ 0    0    1.00
    0    0.50 0
    1.00 0    0
    0    0.75 0.75
    0.75 0    0.75
    0.75 0.75 0
    0.25 0.25 0.25];

FrameColor = [.60 .7 .74];
BackGColor = [.70 .8 .84];


h_figs = get(0,'children');
[mm,fig] = max(strcmp(get(h_figs','Name'),'MDJ // Single Degree of Freedom Time Simulator V2.0'));
if(mm == 1); close(fig); end

% ***************************************************************
% Figure - Beggin
h0 = figure('Units','normalized',...
    'Color',FrameColor,...
    'Position',FIGPOSIT,...
    'Resize','off',...
    'HandleVisibility','on',...
    'UserData',[],...
    'Visible','on',...
    'Name','MDJ // Single Degree of Freedom Time Simulator V2.0', ...
    'NumberTitle','off', ...
    'ToolBar','none',...
    'MenuBar','none');
Data.Handles.MainFig = h0;

% Figure - End
% ***************************************************************
% Axes - Beggin
h1 = axes('Parent',h0, ...
    'Units','normalized', ...
    'Box','on', ...
    'CameraUpVector',[0 1 0], ...
    'CLimMode','auto', ...
    'Color',[1 1 1], ...
    'ColorOrder',Data.COrder, ...
    'FontName','Times', ...
    'FontWeight','demi', ...
    'FontSize',11, ...
    'LineWidth',1, ...
    'Position',[.1 .35 .8 .60], ...
    'XColor',[0 0 0], ...
    'XGrid','on', ...
    'YColor',[0 0 0], ...
    'YGrid','on');
xlabel('TEMPO [s]','FontSize',11, ...
    'FontName','Times','FontWeight','demi')
ylabel('AMPLITUDE [m]','FontSize',11, ...
    'FontName','Times','FontWeight','demi')
title('TIME RESPONSE','FontSize',11, ...
    'FontName','Times','FontWeight','demi')
Data.Handles.Axes = h1;


% Axes - End
% ***************************************************************
% Input Data - Beggin
% IC
pl = uipanel('Parent',h0, ...
    'Units','normalized', ...
    'FontWeight','bold',...
    'Title','INPUT DATA',...
    'Clipping','on',...
    'BackgroundColor',FrameColor, ...
    'ForegroundColor',[0 0 0], ...
    'Position',[.02 .07 .305 .20]);
uicontrol('Parent',pl, ...
    'Units','normalized', ...
    'BackgroundColor',FrameColor, ...
    'FontSize',11, ...
    'FontName','Times', ...
    'FontWeight','demi', ...
    'HorizontalAlignment','left', ...
    'Position',[.05 .65 .45 .2], ...
    'String','Initial Conditions', ...
    'ToolTipString','IC: displacement (in m) and velocity (in m/s).', ...
    'Style','text');
Data.Handles.InitialConditions = uicontrol('Parent',pl, ...
    'Units','normalized', ...
    'Callback',@Misc_Callback,...
    'BackgroundColor',[1 1 1], ...
    'FontSize',11, ...
    'FontName','Times', ...
    'FontWeight','demi', ...
    'Position',[.55 .68 .4 .2], ...
    'String','0.01 0.01', ...
    'Style','edit', ...
    'Tag','InitialConditions');
% External Force
uicontrol('Parent',pl, ...
    'Units','normalized', ...
    'BackgroundColor',FrameColor, ...
    'FontSize',11, ...
    'FontName','Times', ...
    'FontWeight','demi', ...
    'HorizontalAlignment','left', ...
    'Position',[.05 .35 .4 .2], ...
    'String','Force Data', ...
    'ToolTipString','External force: amplitude (in N) and frequency (in rad/s).', ...
    'Style','text');
Data.Handles.ForceData = uicontrol('Parent',pl, ...
    'Units','normalized', ...
    'Callback',@Misc_Callback,...
    'BackgroundColor',[1 1 1], ...
    'FontSize',11, ...
    'FontName','Times', ...
    'FontWeight','demi', ...
    'Position',[.55 .38 .4 .2], ...
    'String','10 5', ...
    'Style','edit', ...
    'Tag','ForceData');
% Analysis Time
uicontrol('Parent',pl, ...
    'Units','normalized', ...
    'BackgroundColor',FrameColor, ...
    'FontSize',11, ...
    'FontName','Times', ...
    'FontWeight','demi', ...
    'HorizontalAlignment','left', ...
    'Position',[.05 .04 .4 .2], ...
    'String','Time Interval', ...
    'ToolTipString','Total analysis time (in s).', ...
    'Style','text');
Data.Handles.TimeInterval = uicontrol('Parent',pl, ...
    'Units','normalized', ...
    'Callback',@Misc_Callback,...
    'BackgroundColor',[1 1 1], ...
    'FontSize',11, ...
    'FontName','Times', ...
    'FontWeight','demi', ...
    'Position',[.55 .07 .4 .2], ...
    'String','10', ...
    'Style','edit', ...
    'Tag','TimeInterval');

% Input Data - End
% ***************************************************************
% System Paramenters - Beggin
% Physical Parameters
Data.Handles.PPPannel = uipanel('Parent',h0, ...
    'Units','normalized', ...
    'FontWeight','bold',...
    'Title','SYSTEM PARAMETERS',...
    'Clipping','on',...
    'BackgroundColor',FrameColor, ...
    'ForegroundColor',[0 0 0], ...
    'Position',[.345 .02 .305 .25]);
% Mass
Data.Handles.MPMass = uicontrol('Parent',Data.Handles.PPPannel, ...
    'Units','normalized', ...
    'Callback',@MPSelection_Callback,...
    'BackgroundColor',FrameColor, ...
    'FontSize',11, ...
    'FontName','Times', ...
    'FontWeight','demi', ...
    'Position',[.05 .75 .53 .15], ...
    'String',' Mass [kg]', ...
    'Style','checkbox', ...
    'ToolTipString','Mark if multiple mass is used!', ...
    'Tag','MPMass', ...
    'Value',0);
Data.Handles.Mass = uicontrol('Parent',Data.Handles.PPPannel, ...
    'Units','normalized', ...
    'Callback',@Parameters_Callback,...
    'BackgroundColor',[1 1 1], ...
    'FontSize',11, ...
    'FontName','Times', ...
    'FontWeight','demi', ...
    'Position',[.60 .75 .35 .15], ...
    'String','10', ...
    'Style','edit', ...
    'Tag','Mass');
% Damping
Data.Handles.MPDamping = uicontrol('Parent',Data.Handles.PPPannel, ...
    'Units','normalized', ...
    'Callback',@MPSelection_Callback,...
    'BackgroundColor',FrameColor, ...
    'FontSize',11, ...
    'FontName','Times', ...
    'FontWeight','demi', ...
    'Position',[.05 .52 .53 .15], ...
    'String',' Damping [Ns/m]', ...
    'Style','checkbox', ...
    'ToolTipString','Mark if multiple damping is used!', ...
    'Tag','MPDamping', ...
    'Value',0);
Data.Handles.Damping = uicontrol('Parent',Data.Handles.PPPannel, ...
    'Units','normalized', ...
    'Callback',@Parameters_Callback,...
    'BackgroundColor',[1 1 1], ...
    'FontSize',11, ...
    'FontName','Times', ...
    'FontWeight','demi', ...
    'Position',[.60 .52 .35 .15], ...
    'String','2', ...
    'Style','edit', ...
    'Tag','Damping');
% Stiffness
Data.Handles.MPStiffness = uicontrol('Parent',Data.Handles.PPPannel, ...
    'Units','normalized', ...
    'Callback',@MPSelection_Callback,...
    'BackgroundColor',FrameColor, ...
    'FontSize',11, ...
    'FontName','Times', ...
    'FontWeight','demi', ...
    'Position',[.05 .29 .53 .15], ...
    'String',' Stiffness [N/m]', ...
    'Style','checkbox', ...
    'ToolTipString','Mark if multiple stiffness is used!', ...
    'Tag','MPStiffness', ...
    'Value',0);
Data.Handles.Stiffness = uicontrol('Parent',Data.Handles.PPPannel, ...
    'Units','normalized', ...
    'Callback',@Parameters_Callback,...
    'BackgroundColor',[1 1 1], ...
    'FontSize',11, ...
    'FontName','Times', ...
    'FontWeight','demi', ...
    'Position',[.60 .29 .35 .15], ...
    'String','1000', ...
    'Style','edit', ...
    'Tag','Stiffness');
% Modal Parameters
Data.Handles.MPPannel = uipanel('Parent',h0, ...
    'Units','normalized', ...
    'FontWeight','bold',...
    'Title','SYSTEM PARAMETERS',...
    'Clipping','on',...
    'BackgroundColor',FrameColor, ...
    'ForegroundColor',[0 0 0], ...
    'Position',[.345 .02 .305 .25], ...
    'Visible','off');
% Natural Frequency
Data.Handles.MPNF = uicontrol('Parent',Data.Handles.MPPannel, ...
    'Units','normalized', ...
    'Callback',@MPSelection_Callback,...
    'BackgroundColor',FrameColor, ...
    'FontSize',11, ...
    'FontName','Times', ...
    'FontWeight','demi', ...
    'Position',[.05 .75 .53 .15], ...
    'String','Natural Frequency', ...
    'Style','checkbox', ...
    'ToolTipString','Mark if multiple natural frequency is used!', ...
    'Tag','MPNF', ...
    'Value',0);
Data.Handles.NF = uicontrol('Parent',Data.Handles.MPPannel, ...
    'Units','normalized', ...
    'Callback',@Parameters_Callback,...
    'BackgroundColor',[1 1 1], ...
    'FontSize',11, ...
    'FontName','Times', ...
    'FontWeight','demi', ...
    'Position',[.60 .75 .35 .15], ...
    'String','10', ...
    'Style','edit', ...
    'ToolTipString','System natural frequency (in Hz).', ...
    'Tag','NF');
% Damping Ratio
Data.Handles.MPDR = uicontrol('Parent',Data.Handles.MPPannel, ...
    'Units','normalized', ...
    'Callback',@MPSelection_Callback,...
    'BackgroundColor',FrameColor, ...
    'FontSize',11, ...
    'FontName','Times', ...
    'FontWeight','demi', ...
    'Position',[.05 .52 .53 .15], ...
    'String',' Damping Ratio', ...
    'Style','checkbox', ...
    'ToolTipString','Mark if multiple damping ratio is used!', ...
    'Tag','MPDR', ...
    'Value',0);
Data.Handles.DR = uicontrol('Parent',Data.Handles.MPPannel, ...
    'Units','normalized', ...
    'Callback',@Parameters_Callback,...
    'BackgroundColor',[1 1 1], ...
    'FontSize',11, ...
    'FontName','Times', ...
    'FontWeight','demi', ...
    'Position',[.60 .52 .35 .15], ...
    'String','1', ...
    'Style','edit', ...
    'ToolTipString','System damping ratio (in %).', ...
    'Tag','DR');
% Modal/Physical Parameter Button
Data.Handles.MODALPAR = uicontrol('Parent',Data.Handles.MainFig, ...
    'Units','normalized', ...
    'Callback',@MODALPAR_Callback,...
    'BackgroundColor',FrameColor, ...
    'FontSize',11, ...
    'FontName','Times', ...
    'FontWeight','bold', ...
    'Position',[.365 .034 .27 .04], ...
    'String','MODAL PARAMETERS', ...
    'Tag','MODALPAR');
% System Paramenters - End
% ***************************************************************
% Graphics Options - Beggin
% Response type
pr = uipanel('Parent',h0, ...
    'Units','normalized', ...
    'FontWeight','bold',...
    'Title','GRAPHICS OPTIONS',...
    'Clipping','on',...
    'BackgroundColor',FrameColor, ...
    'ForegroundColor',[0 0 0], ...
    'Position',[.67 .02 .305 .25]);
uicontrol('Parent',pr, ...
    'Units','normalized', ...
    'BackgroundColor',FrameColor, ...
    'FontSize',11, ...
    'FontName','Times', ...
    'FontWeight','demi', ...
    'HorizontalAlignment','left', ...
    'ListboxTop',0, ...
    'Position',[.05 .72 .35 .15], ...
    'String','Response', ...
    'Style','text');
Data.Handles.Response = uicontrol('Parent',pr, ...
    'Units','normalized', ...
    'Callback',@Plot_Callback,...
    'BackgroundColor',[1 1 1], ...
    'FontSize',11, ...
    'FontName','Times', ...
    'FontWeight','demi', ...
    'HorizontalAlignment','left', ...
    'Position',[.42 .75 .53 .15], ...
    'String',{'Displacement';'Velocity';'Acceleration'}, ...
    'Style','popupmenu', ...
    'Tag','Response', ...
    'Value',1);
% Component type
uicontrol('Parent',pr, ...
    'Units','normalized', ...
    'BackgroundColor',FrameColor, ...
    'FontSize',11, ...
    'FontName','Times', ...
    'FontWeight','demi', ...
    'HorizontalAlignment','left', ...
    'Position',[.05 .49 .35 .15], ...
    'String','Component', ...
    'Style','text');
Data.Handles.Component = uicontrol('Parent',pr, ...
    'Units','normalized', ...
    'Callback',@Plot_Callback,...
    'BackgroundColor',[1 1 1], ...
    'FontSize',11, ...
    'FontName','Times', ...
    'FontWeight','demi', ...
    'HorizontalAlignment','left', ...
    'Position',[.42 .52 .53 .15], ...
    'String',{'Transient';'Permanent';'Total'}, ...
    'Style','popupmenu', ...
    'Tag','Component', ...
    'Value',3);
% Check boxes
Data.Handles.Grid = uicontrol('Parent',pr, ...
    'Units','normalized', ...
    'Callback',@Misc_Callback,...
    'BackgroundColor',FrameColor, ...
    'FontSize',11, ...
    'FontName','Times', ...
    'FontWeight','demi', ...
    'Position',[.05 .29 .35 .15], ...
    'String','Grid', ...
    'Style','checkbox', ...
    'Tag','Grid', ...
    'Value',1);
Data.Handles.Legend = uicontrol('Parent',pr, ...
    'Units','normalized', ...
    'Callback',@Misc_Callback,...
    'BackgroundColor',FrameColor, ...
    'FontSize',11, ...
    'FontName','Times', ...
    'FontWeight','demi', ...
    'Position',[.42 .29 .35 .15], ...
    'String','Legend', ...
    'Style','checkbox', ...
    'Enable','off', ...
    'Tag','Legend');
Data.Handles.Force = uicontrol('Parent',pr, ...
    'Units','normalized', ...
    'Callback',@Plot_Callback,...
    'BackgroundColor',FrameColor, ...
    'FontSize',11, ...
    'FontName','Times', ...
    'FontWeight','demi', ...
    'Position',[.05 .05 .35 .15], ...
    'String','Force', ...
    'Style','checkbox', ...
    'Tag','Force');
Data.Handles.Contour = uicontrol('Parent',pr, ...
    'Units','normalized', ...
    'Callback',@Plot_Callback,...
    'BackgroundColor',FrameColor, ...
    'FontSize',11, ...
    'FontName','Times', ...
    'FontWeight','demi', ...
    'Position',[.42 .05 .35 .15], ...
    'String','Contour', ...
    'Style','checkbox', ...
    'Enable','off', ...
    'Tag','Contour', ...
    'Value',0);
% Graphics Options - End
% ***************************************************************
% Plot & Reset Buttons - Beggin
Data.Handles.PLOT = uicontrol('Parent',h0, ...
    'Units','normalized', ...
    'Callback',@Plot_Callback,...
    'BackgroundColor',FrameColor, ...
    'FontSize',11, ...
    'FontName','Times', ...
    'FontWeight','bold', ...
    'Position',[.02 .017 .15 .04], ...
    'String','PLOT', ...
    'Tag','PLOT');
Data.Handles.RESET = uicontrol('Parent',h0, ...
    'Units','normalized', ...
    'Callback',@Misc_Callback,...
    'BackgroundColor',FrameColor, ...
    'FontSize',11, ...
    'FontName','Times', ...
    'FontWeight','bold', ...
    'Position',[.18 .017 .15 .04], ...
    'String','RESET', ...
    'Tag','RESET');
% Plot & Reset Buttons - End
% ***************************************************************
% Snapshot - Beggin
Data.Handles.Snap = uicontrol('Parent',h0, ...
    'Units','normalized', ...
    'HorizontalAlignment','center', ...
    'Callback',@Snapshop_Callback,...
    'CData',SnapData, ...
    'ToolTipString','Snapshot', ...
    'BackgroundColor',FrameColor, ...
    'FontName','Times', ...
    'Position',[.95 .95 .037 .037], ...
    'String','', ...
    'Tag','Snap');
% Snapshot - End
% ***************************************************************
% Menus - Beggin
h_file      = uimenu(Data.Handles.MainFig,'Label','File');
h_new       = uimenu(h_file,'Label','New');
h_frequency = uimenu(h_new ,'Label','Frequency Module', ...
    'Callback','SDF_FR(''initialize'');');
h_time      = uimenu(h_new ,'Label','Time Module', ...
    'Callback','SDF_TM_MP(''initialize'');');
h_exit      = uimenu(h_file,'Label','Exit', ...
    'Callback',@Exit_Callback,'Separator','on');

h_help       = uimenu(Data.Handles.MainFig,'Label','Help');
h_frequencyh = uimenu(h_help,'Label','Frequency Module', ...
    'Callback',@HelpFrequency_Callback);
h_timeh      = uimenu(h_help,'Label','Time Module', ...
    'Callback',@HelpTime_Callback);
h_about      = uimenu(h_help,'Label','About SDF Simulator', ...
    'Callback',@About_Callback,'Separator','on');
% Menus - End
% ***************************************************************

guidata(Data.Handles.MainFig,Data)



function HelpTime_Callback(hObject,eventdata,handles)
HelpTmTxt = {''; ...
    'INPUT DATA:'; ...
    '     Initial Conditions: initial displacement [m] and initial velocity [m/s]   '; ...                       milton@fem.unicamp.br'; ...
    '     Force Data: amplitude [N] and frequency [rad/s]'; ...
    '                 It is possible to create a multicomponent excitation function   '; ...
    '                 using the following input:'; ...
    '                 [f1 w1; f2 w2; f3 w3; ...]'; ...
    '                 In this case, it is created a signal formed by three harmonic   '; ...
    '                 functions with amplitudes f1, f2, and f3 and frequencies w1, w2,   '; ...
    '                 and w3, respectively.'; ...
    '     Time Interval: total analysis time [s]'; ...
    ''; ...
    ' SYSTEM PARAMETERS'; ...
    '     Natural Frequency: natural frequency of the system [rad/s]'; ...
    '     Damping Ratio: percentage of critical damping [%]'};
hh = msgbox(HelpTmTxt,'SDF Simulator V1.0 Help','help');
uiwait(hh);


function About_Callback(hObject,eventdata,handles)
AboutTxt = {'Developed by Prof. Dr. Milton Dias Junior'; ...
    '                       Department of Mechanical Design'; ...
    '                       Faculty of Mechanical Engineering'; ...
    '                       State University of Campinas'; ...
    '                       São Paulo - Brazil'; ...
    '                       milton@fem.unicamp.br'; ...
    '                       August 31, 2001'};
hh = MsgboxM(AboutTxt,'SDF Simulator V1.0','none');
uiwait(hh);

function MPSelection_Callback(hObject,eventdata,handles)
MainFig = ancestor(hObject,'figure','toplevel');
Data = guidata(MainFig);

switch get(hObject,'Tag')
    case 'MPMass'
        if get(hObject,'Value') == 1
            set(Data.Handles.MODALPAR,'Enable','off');
            set(Data.Handles.MPDamping,'Value',0)
            set(Data.Handles.MPStiffness,'Value',0)
            set(Data.Handles.MPNF,'Value',0)
            set(Data.Handles.MPDR,'Value',0)
            c  = str2num(get(Data.Handles.Damping,'String'));
            set(Data.Handles.Damping,'String',c(1));
            k  = str2num(get(Data.Handles.Stiffness,'String'));
            set(Data.Handles.Stiffness,'String',k(1));
            wn = str2num(get(Data.Handles.NF,'String'));
            set(Data.Handles.NF,'String',wn(1));
            z  = str2num(get(Data.Handles.DR,'String'));
            set(Data.Handles.DR,'String',z(1));
            set(Data.Handles.Legend,'Enable','on')
        else
            set(Data.Handles.MODALPAR,'Enable','on');
            m  = str2num(get(Data.Handles.Mass,'String'));
            set(Data.Handles.Mass,'String',m(1));
            set(Data.Handles.Legend,'Enable','off','Value',0)
            legend(Data.Handles.Axes,'off')
        end

    case 'MPDamping'
        if get(hObject,'Value') == 1
            set(Data.Handles.MODALPAR,'Enable','off');
            set(Data.Handles.MPMass,'Value',0)
            set(Data.Handles.MPStiffness,'Value',0)
            set(Data.Handles.MPNF,'Value',0)
            set(Data.Handles.MPDR,'Value',0)
            m  = str2num(get(Data.Handles.Mass,'String'));
            set(Data.Handles.Mass,'String',m(1));
            k  = str2num(get(Data.Handles.Stiffness,'String'));
            set(Data.Handles.Stiffness,'String',k(1));
            wn = str2num(get(Data.Handles.NF,'String'));
            set(Data.Handles.NF,'String',wn(1));
            z  = str2num(get(Data.Handles.DR,'String'));
            set(Data.Handles.DR,'String',z(1));
            set(Data.Handles.Legend,'Enable','on')
        else
            set(Data.Handles.MODALPAR,'Enable','on');
            c  = str2num(get(Data.Handles.Damping,'String'));
            set(Data.Handles.Damping,'String',c(1));
            set(Data.Handles.Legend,'Enable','off','Value',0)
            legend(Data.Handles.Axes,'off')
        end

    case 'MPStiffness'
        if get(hObject,'Value') == 1
            set(Data.Handles.MODALPAR,'Enable','off');
            set(Data.Handles.MPMass,'Value',0)
            set(Data.Handles.MPDamping,'Value',0)
            set(Data.Handles.MPNF,'Value',0)
            set(Data.Handles.MPDR,'Value',0)
            m  = str2num(get(Data.Handles.Mass,'String'));
            set(Data.Handles.Mass,'String',m(1));
            c  = str2num(get(Data.Handles.Damping,'String'));
            set(Data.Handles.Damping,'String',c(1));
            wn = str2num(get(Data.Handles.NF,'String'));
            set(Data.Handles.NF,'String',wn(1));
            z  = str2num(get(Data.Handles.DR,'String'));
            set(Data.Handles.DR,'String',z(1));
            set(Data.Handles.Legend,'Enable','on')
        else
            set(Data.Handles.MODALPAR,'Enable','on');
            k  = str2num(get(Data.Handles.Stiffness,'String'));
            set(Data.Handles.Stiffness,'String',k(1));
            set(Data.Handles.Legend,'Enable','off','Value',0)
            legend(Data.Handles.Axes,'off')
        end

    case 'MPNF'
        if get(hObject,'Value') == 1
            set(Data.Handles.MODALPAR,'Enable','off');
            set(Data.Handles.MPMass,'Value',0)
            set(Data.Handles.MPDamping,'Value',0)
            set(Data.Handles.MPStiffness,'Value',0)
            set(Data.Handles.MPDR,'Value',0)
            m  = str2num(get(Data.Handles.Mass,'String'));
            set(Data.Handles.Mass,'String',m(1));
            c  = str2num(get(Data.Handles.Damping,'String'));
            set(Data.Handles.Damping,'String',c(1));
            k = str2num(get(Data.Handles.Stiffness,'String'));
            set(Data.Handles.Stiffness,'String',k(1));
            z  = str2num(get(Data.Handles.DR,'String'));
            set(Data.Handles.DR,'String',z(1));
            set(Data.Handles.Legend,'Enable','on')
        else
            set(Data.Handles.MODALPAR,'Enable','on');
            wn  = str2num(get(Data.Handles.NF,'String'));
            set(Data.Handles.NF,'String',wn(1));
            set(Data.Handles.Legend,'Enable','off','Value',0)
            legend(Data.Handles.Axes,'off')
        end

    case 'MPDR'
        if get(hObject,'Value') == 1
            set(Data.Handles.MODALPAR,'Enable','off');
            set(Data.Handles.MPMass,'Value',0)
            set(Data.Handles.MPDamping,'Value',0)
            set(Data.Handles.MPStiffness,'Value',0)
            set(Data.Handles.MPNF,'Value',0)
            m  = str2num(get(Data.Handles.Mass,'String'));
            set(Data.Handles.Mass,'String',m(1));
            c  = str2num(get(Data.Handles.Damping,'String'));
            set(Data.Handles.Damping,'String',c(1));
            k = str2num(get(Data.Handles.Stiffness,'String'));
            set(Data.Handles.Stiffness,'String',k(1));
            wn  = str2num(get(Data.Handles.NF,'String'));
            set(Data.Handles.NF,'String',wn(1));
            set(Data.Handles.Legend,'Enable','on')
        else
            set(Data.Handles.MODALPAR,'Enable','on');
            z  = str2num(get(Data.Handles.DR,'String'));
            set(Data.Handles.DR,'String',z(1));
            set(Data.Handles.Legend,'Enable','off','Value',0)
            legend(Data.Handles.Axes,'off')
        end
end


function Parameters_Callback(hObject,eventdata,handles)
MainFig = ancestor(hObject,'figure','toplevel');
Data = guidata(MainFig);
MultiTxt = {'Multi-plot option not activate!'; ...
    'Only first element of the vector is kept.'};
EmptyTxt = {'This field cannot be empty!'; ...
    'Paramenter reset to its original value.'};

switch get(hObject,'Tag')
    case 'Mass'
        m = str2num(get(Data.Handles.Mass,'String'));
        if length(m) > 1 && get(Data.Handles.MPMass,'Value') == 0
            hh = msgbox(MultiTxt,'Input Data Error','error');
            uiwait(hh)
            set(Data.Handles.Mass,'String',num2str(m(1)));
            m = m(1);
        elseif isempty(m)
            hh = msgbox(EmptyTxt,'Input Data Error','error');
            uiwait(hh)
            set(Data.Handles.Mass,'String','10');
            m = 10;
        end
        c  = str2num(get(Data.Handles.Damping,'String'));
        k  = str2num(get(Data.Handles.Stiffness,'String'));
        z  = c./(2*sqrt(k*m));
    case 'Damping'
        c = str2num(get(Data.Handles.Damping,'String'));
        if length(c) > 1 && get(Data.Handles.MPDamping,'Value') == 0
            hh = msgbox(MultiTxt,'Input Data Error','error');
            uiwait(hh)
            set(Data.Handles.Damping,'String',num2str(c(1)));
            c = c(1);
        elseif isempty(c)
            hh = msgbox(EmptyTxt,'Input Data Error','error');
            uiwait(hh)
            set(Data.Handles.Damping,'String','2');
            c = 2;
        end
        m  = str2num(get(Data.Handles.Mass,'String'));
        k  = str2num(get(Data.Handles.Stiffness,'String'));
        z  = c./(2*sqrt(k*m));
    case 'Stiffness'
        k = str2num(get(Data.Handles.Stiffness,'String'));
        if length(k) > 1 && get(Data.Handles.MPStiffness,'Value') == 0
            hh = msgbox(MultiTxt,'Input Data Error','error');
            uiwait(hh)
            set(Data.Handles.Stiffness,'String',num2str(k(1)));
            k = k(1);
        elseif isempty(k)
            hh = msgbox(EmptyTxt,'Input Data Error','error');
            uiwait(hh)
            set(Data.Handles.Stiffness,'String','1000');
            k = 1000;
        end
        m  = str2num(get(Data.Handles.Mass,'String'));
        c  = str2num(get(Data.Handles.Damping,'String'));
        z  = c./(2*sqrt(k*m));
    case 'NF'
        wn = str2num(get(Data.Handles.NF,'String'));
        if length(wn) > 1 && get(Data.Handles.MPNF,'Value') == 0
            hh = msgbox(MultiTxt,'Input Data Error','error');
            uiwait(hh)
            set(Data.Handles.NF,'String',num2str(wn(1)));
            wn = wn(1);
        elseif isempty(wn)
            hh = msgbox(EmptyTxt,'Input Data Error','error');
            uiwait(hh)
            set(Data.Handles.NF,'String','10');
            wn = 10;
        end
        m  = str2num(get(Data.Handles.Mass,'String'));
        c  = str2num(get(Data.Handles.Damping,'String'));
        z  = c./(2*m*wn);
    case 'DR'
        z = str2num(get(Data.Handles.DR,'String'));
        if length(z) > 1 && get(Data.Handles.MPDR,'Value') == 0
            hh = msgbox(MultiTxt,'Input Data Error','error');
            uiwait(hh)
            set(Data.Handles.DR,'String',num2str(z(1)));
            z = z(1);
        elseif isempty(z)
            hh = msgbox(EmptyTxt,'Input Data Error','error');
            uiwait(hh)
            set(Data.Handles.DR,'String','1');
            z = 1;
        end
        z = z/100;
end
if(max(z) >= 1)
    set(Data.Handles.Component,'Value',1);
    set(Data.Handles.Component,'Enable','off');
    set(Data.Handles.Contour,'Value',0);
    set(Data.Handles.Contour,'Enable','off');
else
    set(Data.Handles.Component,'Enable','on');
    set(Data.Handles.Contour,'Enable','on');
end

function MODALPAR_Callback(hObject,eventdata,handles)
MainFig = ancestor(hObject,'figure','toplevel');
Data = guidata(MainFig);

switch get(hObject,'String')
    case 'MODAL PARAMETERS'
        set(hObject,'String','PHYSICAL PARAMETERS')
        set(Data.Handles.MPPannel,'Visible','on');
        set(Data.Handles.PPPannel,'Visible','off');
        m = str2num(get(Data.Handles.Mass,'String'));
        c = str2num(get(Data.Handles.Damping,'String'));
        k = str2num(get(Data.Handles.Stiffness,'String'));
        wn = sqrt(k/m);
        z = (c/(2*sqrt(k*m)))*100;
        set(Data.Handles.NF,'String',num2str(wn,'%3.1f'));
        set(Data.Handles.DR,'String',num2str(z,'%3.1f'));
    case 'PHYSICAL PARAMETERS'
        set(hObject,'String','MODAL PARAMETERS')
        set(Data.Handles.MPPannel,'Visible','off');
        set(Data.Handles.PPPannel,'Visible','on');
        wn = str2num(get(Data.Handles.NF,'String'));
        z  = str2num(get(Data.Handles.DR,'String'))/100;
        m  = str2num(get(Data.Handles.Mass,'String'));
        k = m*(wn^2);
        c = 2*z*m*wn;
        set(Data.Handles.Damping,'String',num2str(c,'%3.1f'));
        set(Data.Handles.Stiffness,'String',num2str(k,'%3.1f'));
end

function Misc_Callback(hObject,eventdata,handles)
MainFig = ancestor(hObject,'figure','toplevel');
Data = guidata(MainFig);

switch get(hObject,'Tag')
    case 'Grid'
        if get(hObject,'Value') == 1
            grid on
        else
            grid off
        end
    case 'Legend'
        if ~isempty(get(Data.Handles.Axes,'Children'))
            if(get(hObject,'Value') == 1)
                if(get(Data.Handles.MPMass,'Value') == 1)
                    leg_str = str2num(get(Data.Handles.Mass,'String'));
                elseif(get(Data.Handles.MPDamping,'Value') == 1)
                    leg_str = str2num(get(Data.Handles.Damping,'String'));
                elseif(get(Data.Handles.MPStiffness,'Value') == 1)
                    leg_str = str2num(get(Data.Handles.Stiffness,'String'));
                elseif(get(Data.Handles.MPNF,'Value') == 1)
                    leg_str = str2num(get(Data.Handles.NF,'String'));
                elseif(get(Data.Handles.MPDR,'Value') == 1)
                    leg_str = str2num(get(Data.Handles.DR,'String'));
                end
                for nl = 1:length(leg_str)
                    leg_strc{nl} = num2str(leg_str(nl));
                end
                legend(Data.Handles.Axes,leg_strc)
            else
                legend(Data.Handles.Axes,'off')
            end
        end
    case 'RESET'
        set(Data.Handles.InitialConditions,'String','0.01 0.01');
        set(Data.Handles.ForceData,'String','10 5');
        set(Data.Handles.TimeInterval,'String','10');
        set(Data.Handles.PPPannel,'Visible','on');
        set(Data.Handles.MPPannel,'Visible','off');
        set(Data.Handles.MPMass,'Value',0);
        set(Data.Handles.MPDamping,'Value',0);
        set(Data.Handles.MPStiffness,'Value',0);
        set(Data.Handles.MPNF,'Value',0);
        set(Data.Handles.MPDR,'Value',0);
        set(Data.Handles.Mass,'String','10');
        set(Data.Handles.Damping,'String','2');
        set(Data.Handles.Stiffness,'String','1000');
        set(Data.Handles.NF,'String','10');
        set(Data.Handles.DR,'String','1');
        set(Data.Handles.MODALPAR,'String','MODAL PARAMETERS');
        set(Data.Handles.MODALPAR,'Enable','on');
    case 'ForceData'
        if isempty(get(hObject,'String')) || length(str2num(get(hObject,'String'))) == 1
            set(hObject,'String','10 5')
        elseif size(str2num(get(hObject,'String')),1) > 1
            set(Data.Handles.Component,'Value',2);
            set(Data.Handles.Component,'Enable','off');
            set(Data.Handles.Contour,'Value',0);
            set(Data.Handles.Contour,'Enable','off');
        else
            set(Data.Handles.Component,'Enable','on');
            set(Data.Handles.Contour,'Enable','on');
        end
    case 'InitialConditions'
        if isempty(get(hObject,'String')) || ...
                length(str2num(get(hObject,'String'))) == 1 || ...
                length(str2num(get(hObject,'String'))) > 2
            set(hObject,'String','0.01 0.01')
        end
    case 'TimeInterval'
        if isempty(get(hObject,'String')) || ...
                length(str2num(get(hObject,'String'))) > 1
            set(hObject,'String','10')
        end
end

function Plot_Callback(hObject,eventdata,handles)
MainFig = ancestor(hObject,'figure','toplevel');
Data = guidata(MainFig);

if any(strcmp(get(hObject,'Tag'), ...
        {'Component','Response','Contour','Force','Legend'})) && ...
        isempty(get(Data.Handles.Axes,'Children'))
    return
end

ic = str2num(get(Data.Handles.InitialConditions,'String'));
x0 = ic(1); v0 = ic(2);
f  = str2num(get(Data.Handles.ForceData,'String'));

if (isempty(ic) || all(ic == 0)) && (isempty(f) || f(1) == 0)
    MsgTxt = {'THE TIME RESPONSE WILL OBVIOUSLY BE NULL IF YOU SET THE INITIAL '; ...
        'CONDITIONS AND FORCE AMPLITUDE TO ZERO AT THE SAME TIME!'};
    hh = msgbox(MsgTxt,'INCONSISTENT INPUT','Error');
    uiwait(hh);
    return
end

axes(Data.Handles.Axes)

if get(Data.Handles.Component,'Value') == 1
    set(Data.Handles.Contour,'Enable','on')
else
    set(Data.Handles.Contour,'Enable','off','Value',0)
end

switch get(Data.Handles.MODALPAR,'String')
    case 'MODAL PARAMETERS'
        ma = str2num(get(Data.Handles.Mass,'String'));
        ca = str2num(get(Data.Handles.Damping,'String'));
        ka = str2num(get(Data.Handles.Stiffness,'String'));
        if length(ma) > 1
            mv = ma;
            cv = ca*ones(size(mv));
            kv = ka*ones(size(mv));
        elseif length(ca) > 1
            cv = ca;
            mv = ma*ones(size(cv));
            kv = ka*ones(size(cv));
        elseif length(ka) > 1
            kv = ka;
            mv = ma*ones(size(kv));
            cv = ca*ones(size(kv));
        else
            kv = ka;
            mv = ma;
            cv = ca;
        end
        wnv = sqrt(kv./mv);
        zv  = cv./(2*sqrt(kv.*mv));
    case 'PHYSICAL PARAMETERS'
        wna = str2num(get(Data.Handles.NF,'String'));
        za  = str2num(get(Data.Handles.DR,'String'));
        ma  = str2num(get(Data.Handles.Mass,'String'));
        if length(wna) > 1
            wnv = wna;
            zv  = za*ones(size(wnv))/100;
            mv  = ma*ones(size(wnv));
        elseif length(za) > 1
            zv = za/100;
            wnv = wna*ones(size(zv));
            mv  = ma*ones(size(zv));
        else
            wnv = wna;
            zv  = za/100;
            mv  = ma;
        end
        kv = mv.*(wnv.^2);
        cv = 2*zv.*mv.*wnv;
end

wdr= f(2);
tf = str2num(get(Data.Handles.TimeInterval,'String'));
t  = 0:.001*tf:tf;
cla(Data.Handles.Axes)

for mp = 1:length(wnv)
    wn = wnv(mp);
    z = zv(mp);
    f0 = f(1)/mv(mp);
    xs = zeros(size(t));
    xi = zeros(size(t));
    Xa = zeros(size(t));

    if wn == wdr & z == 0
        if x0 ~= 0
            phi = atan((v0/wn)/x0);
        else
            phi = pi/2;
        end
        if phi < 0, phi = pi+phi; end
        A0     = sqrt((v0/wn)^2+x0^2);
        if get(Data.Handles.Component,'Value') == 1
            Xa = A0*cos(wn*t+phi);
            xs = A0*ones(size(t));
            xs = -A0*ones(size(t));
        elseif get(Data.Handles.Component,'Value') == 2
            Xa = (f0/(2*wn))*t.*sin(wn*t);
            xs = (f0/(2*wn))*t;
            xi = -(f0/(2*wn))*t;
        else
            Xa = A0*cos(wn*t+phi)+(f0/(2*wn))*t.*sin(wn*t);
        end
    elseif z < 1
        if z == 0 && wn^2 > wdr^2, phi = 0;
        elseif z == 0 && wn^2 < wdr^2, phi = pi;
        elseif z ~= 0 && wn ~= wdr, phi = atan2(2*z*wn*wdr,(wn^2-wdr^2));
        elseif z ~= 0 && wn == wdr, phi = pi/2;
        end
        if phi < 0, phi = pi+phi; end
        A0 = f0/(sqrt((wn^2-wdr^2)^2+(2*z*wn*wdr)^2));
        A = sqrt(((v0+wn*z*x0-A0*(wn*z*cos(phi)+wdr*sin(phi)))^2)/ ...
            (wn*sqrt(1-z^2))^2+(x0-A0*cos(phi))^2);
        if z == 0 && A0 == 0 && v0 == 0
            theta = pi/2;
        else
            theta = atan2(wn*sqrt(1-z^2)*(x0-A0*cos(phi)), ...
                (v0+z*wn*x0-A0*(wdr*sin(phi)+z*wn*cos(phi))));
        end

        if get(Data.Handles.Response,'Value') == 1                   % displacement
            if get(Data.Handles.Component,'Value') == 1               % transient
                Xa = A*exp(-z*wn.*t).*sin(wn*sqrt(1-z^2).*t+theta);
                xs = A*exp(-z*wn*t);
                xi = -A*exp(-z*wn*t);
            elseif get(Data.Handles.Component,'Value') == 2           % permanent
                Xa = A0*cos(wdr.*t-phi);
                xs = A0*ones(size(t));
                xi = -A0*ones(size(t));
            else                                                      % total response
                Xa = A*exp(-z*wn.*t).*sin(wn*sqrt(1-z^2).*t+theta)+A0*cos(wdr.*t-phi);
            end
        elseif get(Data.Handles.Response,'Value') == 2               % velocity
            if get(Data.Handles.Component,'Value') == 1               % transient
                Xa = -z*wn*A*exp(-z*wn.*t).*sin(wn*sqrt(1-z^2).*t+theta)+ ...
                    wn*sqrt(1-z^2)*A*exp(-z*wn.*t).*cos(wn*sqrt(1-z^2).*t+theta);
                xs = A*wn*exp(-z*wn*t);
                xi = -A*wn*exp(-z*wn*t);
            elseif get(Data.Handles.Component,'Value') == 2           % permanent
                Xa = -wdr*A0*sin(wdr.*t-phi);
                xs = wdr*A0*ones(size(t));
                xi = -wdr*A0*ones(size(t));
            else                                                      % total response
                Xa = -z*wn*A*exp(-z*wn.*t).*sin(wn*sqrt(1-z^2).*t+theta)+ ...
                    wn*sqrt(1-z^2)*A*exp(-z*wn.*t).*cos(wn*sqrt(1-z^2).*t+theta)- ...
                    wdr*A0*sin(wdr.*t-phi);
            end
        elseif get(Data.Handles.Response,'Value') == 3               % acceleration
            if get(Data.Handles.Component,'Value') == 1               % transient
                Xa = wn^2*(2*(z^2)-1)*A*exp(-z*wn.*t).*sin(wn*sqrt(1-z^2).*t+theta)- ...
                    2*z*(wn^2)*sqrt(1-z^2)*A*exp(-z*wn.*t).*cos(wn*sqrt(1-z^2).*t+theta);
                xs = A*(wn^2)*sqrt(2*(z^2)+1)*exp(-z*wn*t);
                xi = -A*(wn^2)*sqrt(2*(z^2)+1)*exp(-z*wn*t);
            elseif get(Data.Handles.Component,'Value') == 2           % permanent
                Xa = -(wdr^2)*A0*cos(wdr.*t-phi);
                xs = (wdr^2)*A0*ones(size(t));
                xi = -(wdr^2)*A0*ones(size(t));
            else                                                      % total response
                Xa = wn^2*(2*(z^2)-1)*A*exp(-z*wn.*t).*sin(wn*sqrt(1-z^2).*t+theta)- ...
                    2*z*(wn^2)*sqrt(1-z^2)*A*exp(-z*wn.*t).*cos(wn*sqrt(1-z^2).*t+theta)- ...
                    (wdr^2)*A0*cos(wdr.*t-phi);
            end
        end
    elseif z > 1
        a1     = (-v0+(-z+sqrt(z^2-1))*wn*x0)/(2*wn*sqrt(z^2-1));
        a2     = (v0+(z+sqrt(z^2-1))*wn*x0)/(2*wn*sqrt(z^2-1));
        Xa = exp(-z*wn.*t).*(a1.*exp(-wn*sqrt(z^2-1).*t)+a2.*exp(wn*sqrt(z^2-1).*t));
        xs = [];
        xi = [];
    elseif z == 1
        a1     = x0;
        a2     = v0+wn*x0;
        Xa = (a1+a2.*t).*exp(-wn.*t);
        xs = [];
        xi = [];
    end

    line(t,Xa,'Color',Data.COrder(mp,:))
    hold(Data.Handles.Axes,'on')

    if get(Data.Handles.Contour,'Value') == 1
        line(t,[xs; xi],'Color',[.2 .7 .4], ...
            'Parent',Data.Handles.Axes,'LineStyle','--')
    end
    clear xs xi
end
hold(Data.Handles.Axes,'off')
axis(Data.Handles.Axes,'auto')
lims = axis;
ymax = max(abs([lims(3) lims(4)]));
set(Data.Handles.Axes,'YLim',[-ymax ymax]);
YTxt = {'DESLOCAMENTO [m]','VELOCIDADE [m/s]','ACELERAÇÃO [m/s^{2}]'};
ylabel(YTxt{get(Data.Handles.Response,'Value')})
TTxt = {'RESPOSTA TRANSIENTE','RESPOSTA PERMANENTE','RESPOSTA TOTAL'};
title(TTxt{get(Data.Handles.Component,'Value')})

if get(Data.Handles.Legend,'Value') == 1
    if get(Data.Handles.MPMass,'Value') == 1
        leg_str = str2num(get(Data.Handles.Mass,'String'));
    elseif get(Data.Handles.MPDamping,'Value') == 1
        leg_str = str2num(get(Data.Handles.Damping,'String'));
    elseif get(Data.Handles.MPStiffness,'Value') == 1
        leg_str = str2num(get(Data.Handles.Stiffness,'String'));
    elseif get(Data.Handles.MPNF,'Value') == 1
        leg_str = str2num(get(Data.Handles.NF,'String'));
    elseif get(Data.Handles.MPDR,'Value') == 1
        leg_str = str2num(get(Data.Handles.DR,'String'));
    end
    for nl = 1:length(leg_str)
        leg_strc{nl} = num2str(leg_str(nl));
    end
    legend(Data.Handles.Axes,leg_strc)
elseif get(Data.Handles.Legend,'Value') == 0
    legend(Data.Handles.Axes,'off')
end

if get(Data.Handles.Force,'Value') == 1
    axhan = findobj(Data.Handles.MainFig,'Type','axes');
    if length(axhan) > 1, delete(axhan(2)), end
    F = f(1)*cos(wdr*t);
    h2 = axes('Parent',Data.Handles.MainFig, ...
        'Units','normalized', ...
        'CameraUpVector',[0 1 0], ...
        'CLimMode','auto', ...
        'Color','none', ...
        'ColorOrder',[1 0 0], ...
        'FontName','Times', ...
        'FontWeight','demi', ...
        'FontSize',11, ...
        'LineWidth',1, ...
        'Position',get(Data.Handles.Axes,'Position'), ...
        'XColor',[0 0 0], ...
        'YAxisLocation','right',...
        'YColor',[1 0 0]);
    ylabel('FORÇA [N]','FontSize',11, ...
        'FontName','Times','FontWeight','demi')
    line(t,F,'Parent',h2)
    ax2ylim = get(h2,'YLim');
    set(h2, ...
        'YTick',linspace(ax2ylim(1),ax2ylim(2),length(get(Data.Handles.Axes,'YTick'))));
    set(h2,'XTick',[]);
    set(h2,'Color','none');
    %     axes(Data.Handles.Axes);
else
    axhan = findobj(Data.Handles.MainFig,'Type','axes');
    if length(axhan) > 1, delete(axhan(2)), end
end




function Snapshop_Callback(hObject,eventdata,handles)
MainFig = ancestor(hObject,'figure','toplevel');
Data = guidata(MainFig);

if isempty(get(Data.Handles.Axes,'Children'))
    uiwait(warndlg('Graphic is empty! It is senseless to export this figure!!!', ...
        'WARNING: NO GRAPHIC TO EXPORT'))
    return
else
    h = figure('Color','w','Units','normalized','Position',Data.FigPosit+[0 .2 0 -.2]);
    legend(Data.Handles.Axes,'off')
    cup = copyobj(findobj(Data.Handles.MainFig,'Type','axes'),h);
    set(cup,'Position',[0.1300 0.1100 0.7750 0.8150])
    if ~isempty(get(Data.Handles.Axes,'Children'))
        if(get(Data.Handles.Legend,'Value') == 1)
            if(get(Data.Handles.MPMass,'Value') == 1)
                leg_str = str2num(get(Data.Handles.Mass,'String'));
            elseif(get(Data.Handles.MPDamping,'Value') == 1)
                leg_str = str2num(get(Data.Handles.Damping,'String'));
            elseif(get(Data.Handles.MPStiffness,'Value') == 1)
                leg_str = str2num(get(Data.Handles.Stiffness,'String'));
            elseif(get(Data.Handles.MPNF,'Value') == 1)
                leg_str = str2num(get(Data.Handles.NF,'String'));
            elseif(get(Data.Handles.MPDR,'Value') == 1)
                leg_str = str2num(get(Data.Handles.DR,'String'));
            end
            for nl = 1:length(leg_str)
                leg_strc{nl} = num2str(leg_str(nl));
            end
            legend(cup,leg_strc)
        end
    end
end

function [SnapData] = SnapshotCData()

SnapData(:,:,1) = [
  191  191  191  191  191  191  191  191  191  127  127  127  127  127  191  191  191  191  191  191  191   191  191  191
  191  191  191  191  191  191  191  191  191  127  191  255  191  255  127  191  191  191  127  127  127     0    0  191
  191  191    0    0    0  127  191  191  127  191  255  191  255  191  255  127  191  191  127  191  255   127    0  191
  127  127  127  127  127  127  127  127  127  127  127  127    0    0    0    0    0    0    0    0    0     0    0  127
  127  127    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0     0    0  127
    0  127  255  255  255  255  191  191  127  191  255  191  255  191  127  127  127  191  127  191  127   191  127  127
    0  191  127    0    0  127  127  127  255  255  127    0    0  127  255    0    0    0    0    0    0     0    0  127
    0  127  127    0    0  127  127  255  255  127    0    0    0    0  127  191    0    0    0  127    0   127    0  127
    0  191    0  127  127    0  127  255    0    0    0  255  191    0    0  127  191    0  127    0  127     0    0  127
    0  127  127    0    0    0  191  255    0    0  255    0    0    0    0    0  127    0    0  127    0   127    0  127
    0  191  127    0    0    0  191  255    0    0  255    0    0    0    0    0  191    0    0    0  127     0    0  127
    0  127    0  127  127    0  127  255    0    0  191    0    0    0    0    0  191    0    0  127    0   127    0  127
    0  191  127    0    0  127  127  255  255    0    0    0    0    0    0  127  127    0    0    0  127     0    0  127
    0  127  127    0    0  127  127  127  255  255    0    0    0    0  127  255    0    0    0  127    0   127    0  127
    0  191  255  255  255  191  191  127  127  191  255  191  255  191  191    0    0  191  127  191  127   191    0  127
  127  127  127  127  127  127  127  127  127  127  127  127  127  127  127  127  127  127  127  127  127   127  127  127
    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0     0    0  127];

SnapData(:,:,2) = [
  191  191  191  191  191  191  191  191  191  127  127  127  127  127  191  191  191  191  191  191  191   191  191  191
  191  191  191  191  191  191  191  191  191  127  191  255  191  255  127  191  191  191  127  127  127     0    0  191
  191  191    0    0    0  127  191  191  127  191  255  191  255  191  255  127  191  191  127  191  255   127    0  191
  127  127  127  127  127  127  127  127  127  127  127  127    0    0    0    0    0    0    0    0    0     0    0  127
  127  127    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0     0    0  127
    0  127  255  255  255  255  191  191  127  191  255  191  255  191  127  127  127  191  127  191  127   191  127  127
    0  191  127    0    0  127  127  127  255  255  127    0    0  127  255    0    0    0    0    0    0     0    0  127
    0  127  127    0    0  127  127  255  255  127    0    0    0    0  127  191    0    0    0  127    0   127    0  127
    0  191    0  127  127    0  127  255    0    0    0  255  191    0    0  127  191    0  127    0  127     0    0  127
    0  127  127    0    0    0  191  255    0    0  255    0    0    0    0    0  127    0    0  127    0   127    0  127
    0  191  127    0    0    0  191  255    0    0  255    0    0    0    0    0  191    0    0    0  127     0    0  127
    0  127    0  127  127    0  127  255    0    0  191    0    0    0    0    0  191    0    0  127    0   127    0  127
    0  191  127    0    0  127  127  255  255    0    0    0    0    0    0  127  127    0    0    0  127     0    0  127
    0  127  127    0    0  127  127  127  255  255    0    0    0    0  127  255    0    0    0  127    0   127    0  127
    0  191  255  255  255  191  191  127  127  191  255  191  255  191  191    0    0  191  127  191  127   191    0  127
  127  127  127  127  127  127  127  127  127  127  127  127  127  127  127  127  127  127  127  127  127   127  127  127
    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0     0    0  127];

SnapData(:,:,3) = [
  191  191  191  191  191  191  191  191  191  127  127  127  127  127  191  191  191  191  191  191  191   191  191  191
  191  191  191  191  191  191  191  191  191  127  191  255  191  255  127  191  191  191  127  127  127     0    0  191
  191  191    0    0    0  127  191  191  127  191  255  191  255  191  255  127  191  191  127  191  255   127    0  191
  127  127  127  127  127  127  127  127  127  127  127  127    0    0    0    0    0    0    0    0    0     0    0  127
  127  127    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0     0    0  127
    0  127  255  255  255  255  191  191  127  191  255  191  255  191  127  127  127  191  127  191  127   191  127  127
    0  191  127    0    0  127  127  127  255  255  127    0    0  127  255    0    0    0    0    0    0     0    0  127
    0  127  127    0    0  127  127  255  255  127    0    0    0    0  127  191    0    0    0  127    0   127    0  127
    0  191    0  127  127    0  127  255    0    0    0  255  191    0    0  127  191    0  127    0  127     0    0  127
    0  127  127    0    0    0  191  255    0    0  255    0    0    0    0    0  127    0    0  127    0   127    0  127
    0  191  127    0    0    0  191  255    0    0  255    0    0    0    0    0  191    0    0    0  127     0    0  127
    0  127    0  127  127    0  127  255    0    0  191    0    0    0    0    0  191    0    0  127    0   127    0  127
    0  191  127    0    0  127  127  255  255    0    0    0    0    0    0  127  127    0    0    0  127     0    0  127
    0  127  127    0    0  127  127  127  255  255    0    0    0    0  127  255    0    0    0  127    0   127    0  127
    0  191  255  255  255  191  191  127  127  191  255  191  255  191  191    0    0  191  127  191  127   191    0  127
  127  127  127  127  127  127  127  127  127  127  127  127  127  127  127  127  127  127  127  127  127   127  127  127
    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0     0    0  127];

SnapData = SnapData/max(max(max(SnapData)));